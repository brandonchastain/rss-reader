@using WasmApp.Services
@implements IDisposable
@inject IJSRuntime JS
@inject IFeedClient FeedClient
<div class="toolbar">

    <button class="btn-link" @onclick="() => RefreshAsync()">
        @* @if (feedRefresher.IsRefreshing)
        {
            <i class="fas fa-sync fa-spin"></i>
        }
        else
        {
            <i class="fas fa-sync"></i>
        } *@

        <i class="fas fa-sync"></i>
    </button>

    <div class="dropdown-container">
        <button class="btn-link" @onclick="() => ToggleShowFilters()">[filters]</button>

        <div class="filter-dropdown @(tagsAreHidden ? "" : "show")" id="filter-tags">
            <button class="btn-link" @onclick="async () => {await ToggleUnreadFilterAsync.InvokeAsync(); await ToggleShowFilters();}">@(this.IsFilterUnread ? "[all]" : "[unread]")</button>
            <button class="btn-link" @onclick="async () => {await ToggleSavedFilterAsync.InvokeAsync(); await ToggleShowFilters();}">@(this.IsFilterSaved ? "[all]" : "[saved]")</button>
            @if (this.userTags != null)
            {
                @foreach (var tag in this.userTags)
                {
                    <button class="btn-link" style="@(this.filterTag == tag ? "color: pink" : "")" @onclick="async () => {await FilterForTag.InvokeAsync(tag); await ToggleShowFilters();}">[@tag]</button>
                }
            }
        </div>
    </div>
</div>

<style>
    .dropdown-container {
        position: relative;
        display: inline-block;
    }

    .filter-dropdown {
        display: none;
        position: absolute;
        top: 100%;
        left: 0;
        background-color: #fff;
        border: 1px solid #ddd;
        border-radius: 4px;
        padding: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        z-index: 1000;
        min-width: 150px;
    }

    .filter-dropdown.show {
        display: block;
    }

    .filter-dropdown button {
        display: block;
        width: 100%;
        text-align: left;
        padding: 4px 8px;
    }

    .filter-dropdown button:hover {
        background-color: #f5f5f5;
    }
</style>

@code {
    // [Parameter]
    // public IFeedRefresher feedRefresher { get; set; }

    [Parameter]
    public string filterTag { get; set; }

    [Parameter]
    public bool IsFilterUnread { get; set; }

    [Parameter]
    public bool IsFilterSaved { get; set; }

    [Parameter]
    public IEnumerable<string> userTags { get; set; }
    
    [Parameter]
    public EventCallback ToggleUnreadFilterAsync { get; set; }
    
    [Parameter]
    public EventCallback ToggleSavedFilterAsync { get; set; }
    
    [Parameter]
    public EventCallback<string> FilterForTag { get; set; }
    private bool tagsAreHidden = true;

    protected override void OnInitialized()
    {
        //feedRefresher.OnNewItemsAvailable += HandleNewItems;
        //feedRefresher.OnRefreshComplete += HandleRefreshComplete; *@
    }

    public void Dispose()
    {
        //feedRefresher.OnNewItemsAvailable -= HandleNewItems;
        //feedRefresher.OnRefreshComplete -= HandleRefreshComplete; *@
    }

    private async Task RefreshAsync()
    {
        await FeedClient.RefreshFeedsAsync();
    }

    private async Task ToggleShowFilters()
    {
        tagsAreHidden = !tagsAreHidden;
        await InvokeAsync(StateHasChanged);
    }
}