@page "/posts"
@attribute [StreamRendering]
@using System.Xml
@using System.Xml.Linq
@using System.Xml.Serialization
@using Microsoft.AspNetCore.Components.Authorization
@inject ILogger<Posts> logger
@inject IFeedClient feedClient
@inject IJSRuntime jsRuntime


@rendermode InteractiveServer // needed for onclick

<PageTitle>Posts</PageTitle>

<h1>Posts from @(FeedUrl == null ? string.Empty : new Uri(FeedUrl).Authority)</h1>

<CascadingValue Value="GetRssFeed">
    <PostTable />
</CascadingValue>

@code {

    [SupplyParameterFromQuery]
    public string FeedUrl { get; set; }
    private RssUser user;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var username = await this.GetUsernameAsync();
            user = await this.feedClient.RegisterUserAsync(username);
            this.StateHasChanged();
        }
    }

    private async Task<IEnumerable<NewsFeedItem>> GetRssFeed(IFeedClient fc, int page)
    {
        if (user == null)
        {
            return Enumerable.Empty<NewsFeedItem>();
        }

        return await fc.GetFeedItemsAsync(new NewsFeed(FeedUrl, user.Id), page);
    }

    private async Task<string> GetUsernameAsync()
    {
        // invoke a javascript function to get the username
        var username = await jsRuntime.InvokeAsync<string>("getUsername");
        return username;
    }
}