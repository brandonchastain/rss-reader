@page "/posts"
@attribute [StreamRendering]
@using System.Xml
@using System.Xml.Linq
@using System.Xml.Serialization
@using Microsoft.AspNetCore.Components.Authorization
@inject ILogger<Posts> logger
@inject IFeedClient feedClient
@inject IJSRuntime jsRuntime


@rendermode InteractiveServer // needed for onclick

<PageTitle>Posts</PageTitle>
Username: @(user == null ? "loading" : user.Username)
<h1>Posts from @(FeedUrl == null ? string.Empty : new Uri(FeedUrl).Authority)</h1>

<CascadingValue Value="@Page" Name="Page">
    <CascadingValue Value="@Items" Name="Posts">
        <PostTable OnPageChanged="UpdatePage" OnRefreshTriggered="RefreshPosts"/>
    </CascadingValue>
</CascadingValue>

@code {

    [SupplyParameterFromQuery]
    public string FeedUrl { get; set; }
    public int Page { get; set; } = 0;
    
    public List<NewsFeedItem> Items { get; set; } = new List<NewsFeedItem>();
    private RssUser user;

    protected override void OnInitialized()
    {
        Page = 0;
    }

    private async Task UpdatePage(int newValue)
    {
        Page = newValue;
        await this.RefreshPosts(this.feedClient.IsFilterUnread);
        StateHasChanged();
    }

    private async Task RefreshPosts(bool isFilterUnread)
    {
        this.feedClient.IsFilterUnread = isFilterUnread;

        var feed = new NewsFeed(FeedUrl, this.user.Id);
        var newPageRes = await this.feedClient.GetFeedItemsAsync(feed, Page);
        Items.AddRange(newPageRes);
        while (isFilterUnread && Items.Where(p => !p.IsRead).Count() < 10 && newPageRes.Any())
        {
            Page++;
            newPageRes = await this.feedClient.GetFeedItemsAsync(feed, Page);
            Items.AddRange(newPageRes);
        }

        this.StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (user == null)
        {
            var username = await this.GetUsernameAsync();
            user = await this.feedClient.RegisterUserAsync(username);
            Items = (await this.feedClient.GetFeedItemsAsync(new NewsFeed(FeedUrl, user.Id), Page)).ToList();
            this.StateHasChanged();
        }
    }

    private async Task<string> GetUsernameAsync()
    {
        return await jsRuntime.InvokeAsync<string>("getUsername");
    }
}