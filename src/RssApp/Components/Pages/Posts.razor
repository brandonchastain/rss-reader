@page "/posts"
@attribute [StreamRendering]
@using System.Xml
@using System.Xml.Linq
@using System.Xml.Serialization
@using Microsoft.AspNetCore.Components.Authorization
@inject ILogger<Posts> logger
@inject IFeedClient feedClient
@inject IJSRuntime jsRuntime


@rendermode InteractiveServer // needed for onclick

<PageTitle>Posts</PageTitle>

<h1>Posts from @(FeedUrl == null ? string.Empty : new Uri(FeedUrl).Authority)</h1>

<CascadingValue Value="GetRssFeed">
    <PostTable />
</CascadingValue>



<script>
    async function getUsername() {
        const response = await fetch('/.auth/me');  
        console.log("sending request...");
        // convert to JSON  
        const json = await response.json();  
        // ensure clientPrincipal and userDetails exist  
        if(json.length > 0 && json[0].user_id) {  
            // return userDetails (the username)  
            console.log(json[0].user_id);
            return json[0].user_id;  
        } else {  
            // return null if anonymous
            return null;  
        }
    }
</script>

@code {

    [SupplyParameterFromQuery]
    public string FeedUrl { get; set; }

    private async Task<IEnumerable<NewsFeedItem>> GetRssFeed(IFeedClient fc, int page)
    {
        var username = await this.GetUsernameAsync();
        var user = await this.feedClient.RegisterUserAsync(username);
        return await fc.GetFeedItemsAsync(new NewsFeed(FeedUrl, user.Id), page);
    }

    private async Task<string> GetUsernameAsync()
    {
        // invoke a javascript function to get the username
        var username = await jsRuntime.InvokeAsync<string>("getUsername");
        this.logger.LogInformation("[USERNAME]: {username}", username);
        return username;
    }
}