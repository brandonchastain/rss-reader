@page "/posts"
@attribute [StreamRendering]
@using System.Xml
@using System.Xml.Linq
@using System.Xml.Serialization
@using Microsoft.AspNetCore.Components.Authorization
@inject ILogger<Posts> logger
@inject IFeedClient feedClient
@inject IJSRuntime jsRuntime


@rendermode InteractiveServer // needed for onclick

<PageTitle>Posts</PageTitle>
Username: @(CurrentUser == null ? "loading" : CurrentUser.Username)
<h1>Posts from @(FeedUrl == null ? string.Empty : new Uri(FeedUrl).Authority)</h1>

<CascadingValue Value="@feedClient" Name="FeedClient">
<CascadingValue Value="@CurrentUser" Name="CurrentUser">
<CascadingValue Value="@Page" Name="Page">
<CascadingValue Value="@Items" Name="Posts">
    <PostTable OnPageChanged="UpdatePage" OnRefreshTriggered="RefreshPosts"/>
</CascadingValue>
</CascadingValue>
</CascadingValue>
</CascadingValue>

@code {

    public RssUser CurrentUser { get; set; }

    [SupplyParameterFromQuery]
    public string FeedUrl { get; set; }
    public int Page { get; set; } = 0;
    
    public List<NewsFeedItem> Items { get; set; } = new List<NewsFeedItem>();

    protected override void OnInitialized()
    {
        Page = 0;
    }

    private async Task UpdatePage(int newValue)
    {
        Page = newValue;
        await this.RefreshPosts((this.feedClient.IsFilterUnread, this.feedClient.FilterTag));
        StateHasChanged();
    }

    private async Task RefreshPosts((bool isFilterUnread, string filterTag) filters)
    {
        this.feedClient.IsFilterUnread = filters.isFilterUnread;
        this.feedClient.FilterTag = filters.filterTag;

        var feed = new NewsFeed(FeedUrl, this.CurrentUser.Id);
        var newPageRes = await this.feedClient.GetFeedItemsAsync(feed, Page);
        Items.AddRange(newPageRes);

        this.StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (CurrentUser == null)
        {
            var username = await this.GetUsernameAsync();
            this.CurrentUser = await this.feedClient.RegisterUserAsync(username);
            Items = (await this.feedClient.GetFeedItemsAsync(new NewsFeed(FeedUrl, this.CurrentUser.Id), Page)).ToList();
            this.StateHasChanged();
        }
    }

    private async Task<string> GetUsernameAsync()
    {
        return await jsRuntime.InvokeAsync<string>("getUsername");
    }
}