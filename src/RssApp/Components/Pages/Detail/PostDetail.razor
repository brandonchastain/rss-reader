@inherits PageBase

@rendermode InteractiveServer
@attribute [StreamRendering]
@attribute [Authorize]

@if (Post != null)
{
<div class="row @(Post.IsRead ? "post-read" : "post-unread")" @onclick="() => HandleClick(Post)" hidden=@(ShouldPostBeHidden(Post))>
    <div class="col thumbnail">
        @{
            var thumbnailUrl = Post.ThumbnailUrl;
            if (!String.IsNullOrWhiteSpace(thumbnailUrl))
            {
                <img src="@thumbnailUrl" alt="Thumbnail" class="thumbnail" />
            }
        }
    </div>
    <div class="col">
        <p class="post-title">
            <a tooltip="@Post.ParsedDate?.ToString("f")" href="@Post.Href" @onclick:stopPropagation="true" @onclick="() => { HandleClick(Post, false); MarkAsRead(Post, true);}">@Post.Title</a><br/>
            @if (!String.IsNullOrWhiteSpace(Post.CommentsHref))
            {
                <a href="@Post.CommentsHref">[comments]</a>
            }
            <button class="link" @onclick:stopPropagation="true" @onclick:preventDefault="true" @onclick="() => MarkAsRead(Post)">[mark @(!Post.IsRead ? "read" : "unread")]</button>
            <button class="link" @onclick:stopPropagation="true" @onclick:preventDefault="true" @onclick="async () => await SavePost(Post)">[@(!Post.IsSaved ? "save" : "unsave")]</button>
            @Post.Href.GetRootDomain()<br/>
            @(Post.FeedTags.Any() ? $"[{string.Join(",", Post.FeedTags)}]" : "")
        </p>
    </div>
</div>
<div class="postContent" hidden=@(!Post.IsBeingPreviewed)>
    @if (Post != null)
    {
        <div class="">
            <p>
                Published on @Post.ParsedDate?.ToString("f")
            </p>
            <p>
                @if (!Post.ThumbnailUrl.EndsWith("placeholder.jpg"))
                {
                    <img src="@Post.ThumbnailUrl" alt="Thumbnail" class="thumbnail" />
                }
            </p>
                @if (Content.ContainsKey(Post.Href))
                {
                    <p>
                        @((MarkupString)(@HtmlSanitizer.Sanitize(Content[Post.Href])))
                    </p>
                }
            <p>
                <a href="/posts?feedUrl=@System.Net.WebUtility.UrlEncode(Post.FeedUrl)" onclick="event.stopPropagation()">View all posts from this feed</a><br/>
            </p>
        </div>
    }
    else
    {
        <p>Loading...</p>
    }
</div>
}

@code {
    [Parameter]
    public NewsFeedItem Post { get; set; }

    [Parameter]
    public string? FilterTag { get; set; }

    [Parameter]
    public bool IsFilterUnread { get; set; }

    [Parameter]
    public EventCallback OnPostClicked { get; set; }

    private Dictionary<string, string> Content { get; set; } = new Dictionary<string, string>();

    private bool ShouldPostBeHidden(NewsFeedItem post)
    {
        bool isFilteredByTag = this.FilterTag != null && !post.FeedTags.Contains(this.FilterTag);
        bool isFilteredByUnread = !post.IsBeingPreviewed && this.IsFilterUnread && post.IsRead;
        return isFilteredByTag || isFilteredByUnread;
    }

    private void MarkAsRead(NewsFeedItem item, bool? isRead = null)
    {
        bool val = isRead ?? !item.IsRead;
        item.IsRead = val;
        this.feedClient.MarkAsRead(item, val);
        InvokeAsync(StateHasChanged);
    }

    private void PreviewPost(NewsFeedItem post)
    {
        post.IsBeingPreviewed = !post.IsBeingPreviewed;

        if (!Content.ContainsKey(post.Href))
        {
            Content[post.Href] = feedClient.GetItemContent(post);
        }

        InvokeAsync(this.StateHasChanged);
        MarkAsRead(post, true);
    }

    private async Task SavePost(NewsFeedItem post)
    {
        if (!post.IsSaved)
        {
            await this.feedClient.SavePostAsync(post);
            post.IsSaved = true;
        }
        else    
        {
            await this.feedClient.UnsavePostAsync(post);
            post.IsSaved = false;
        }

        await InvokeAsync(StateHasChanged);
    }

    private void HandleClick(NewsFeedItem post, bool preview = true)
    {
        if (preview)
        {
            PreviewPost(post);
        }

        if (OnPostClicked.HasDelegate)
        {
            OnPostClicked.InvokeAsync(post);
        }
    }
}