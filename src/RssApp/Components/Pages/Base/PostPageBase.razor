@inherits PageBase
@inject ILogger<PostPageBase> logger

@code {
    public List<NewsFeedItem> Items { get; set; } = new List<NewsFeedItem>();
    public int Page { get; set; } = 0;
    protected bool initialized = false;
    protected int loadedPage = -1;

    protected virtual async Task<List<NewsFeedItem>> GetPostsAsync()
    {
        // overriden
        throw new NotImplementedException();
    }

    protected async Task UpdatePage(int page)
    {
        if (!initialized)
        {
            return;
        }

        Page = page;

        await this.RefreshItems((this.feedClient.IsFilterUnread, this.feedClient.IsFilterSaved, this.feedClient.FilterTag));
    }

    protected async Task RefreshItems((bool isFilterUnread, bool isFilterSaved, string filterTag) filters)
    {
        if (filters.isFilterUnread != this.feedClient.IsFilterUnread
            || filters.isFilterSaved != this.feedClient.IsFilterSaved
            || filters.filterTag != this.feedClient.FilterTag)
        {
            Items = new List<NewsFeedItem>();
            Page = 0;
            this.loadedPage = -1;
            this.feedClient.IsFilterUnread = filters.isFilterUnread;
            this.feedClient.IsFilterSaved = filters.isFilterSaved;
            this.feedClient.FilterTag = filters.filterTag;
        }

        if (Page <= loadedPage)
        {
            this.logger.LogWarning("RefreshItems extraneous call");
            return;
        }
        
        var newPageRes = await this.GetPostsAsync();
        Items.AddRange(newPageRes.Distinct());
        this.loadedPage = Page;
        
        this.StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            Items = await this.GetPostsAsync();
            this.loadedPage = Page;
            this.initialized = true;
            this.StateHasChanged();
        }
    }
}
