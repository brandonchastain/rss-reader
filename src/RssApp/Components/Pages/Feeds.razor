@page "/feeds"
@using Microsoft.AspNetCore.Components.Authorization
@attribute [StreamRendering]
@inject IFeedRepository feedStore
@inject IFeedClient feedClient
@inject ILogger<Feeds> logger
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime jsRuntime
@rendermode InteractiveServer

<PageTitle>Feeds</PageTitle>

<h1>Feeds</h1>

<form method="post" @onsubmit="SubmitAsync" @formname="newfeed">
    <AntiforgeryToken />
    <div>
        <InputText @bind-Value="NewFeedUrl" placeholder="Feed URL" width=250 />
        <button type="submit">Add feed</button>
    </div>
    <div>
    </div>
</form>

@if (feeds == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div id="post-table" class="table">
        @foreach (NewsFeed feed in feeds)
        {
            @* <div class="row"> *@
                <div class="row post-unread" style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                    <div class="col" style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                        <a href="posts?FeedUrl=@System.Net.WebUtility.UrlEncode(feed.FeedUrl)">@feed.FeedUrl</a>
                    </div>
                    <div class="col" style="overflow: hidden;">
                        <p>
                            @if (!newTagInputs.ContainsKey(feed.FeedUrl))
                            {
                                newTagInputs[feed.FeedUrl] = string.Empty;
                            }

                            @if (feed.Tags != null && feed.Tags.Any())
                            {
                                <span>Tags: @(string.Join(", ", feed.Tags))</span>
                            }

                            <input type="text" 
                                value="@newTagInputs[feed.FeedUrl]" 
                                @oninput="e => UpdateTagInput(feed, e.Value.ToString())" 
                                placeholder="Tag" />
                            <button class="btn btn-link p-0" @onclick="() => AddTag(feed)">Add tag</button>
                            <button class="btn btn-link p-0" @onclick="() => DeleteAsync(feed.FeedUrl)">Delete</button>
                            @if (feed.IsPaywalled)
                            {
                                <button class="btn btn-link p-0" @onclick="() => TogglePaywalledAsync(feed)">??</button>
                            }
                            else
                            {
                                <button class="btn btn-link p-0" @onclick="() => TogglePaywalledAsync(feed)">Not ??</button>
                            }
                        </p>
                    </div>
                </div>
                
            @* </div> *@
        }
    </div>
}

@code {
    private Dictionary<string, string> newTagInputs = new Dictionary<string, string>();

    private IEnumerable<NewsFeed> feeds;
    private RssUser user;

    [SupplyParameterFromForm]
    private string NewFeedUrl { get; set; }

    protected override void OnInitialized()
    {
        if (user != null)
        {
            feeds = this.GetFeedUrls();
        }
        else
        {
            feeds = Enumerable.Empty<NewsFeed>();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender || user == null)
        {
            var username = await this.GetUsernameAsync();
            user = await this.feedClient.RegisterUserAsync(username);
            feeds = this.GetFeedUrls();
            this.StateHasChanged();
        }
    }

    private async Task<string> GetUsernameAsync()
    {
        return await jsRuntime.InvokeAsync<string>("getUsername");
    }

    private async Task SubmitAsync()
    {
        this.feedStore.AddFeed(new NewsFeed(NewFeedUrl, this.user.Id));
        await this.feedClient.AddFeedAsync(new NewsFeed(NewFeedUrl, this.user.Id));
        await this.OnInitializedAsync();
    }

    private async Task DeleteAsync(string feed)
    {
        this.feedStore.DeleteFeed(this.user, feed);
        await this.OnInitializedAsync();
    }

    private IEnumerable<NewsFeed> GetFeedUrls()
    {
        return this.feedStore.GetFeeds(this.user);
    }

    private void TogglePaywalledAsync(NewsFeed feed)
    {
        feed.IsPaywalled = !feed.IsPaywalled;
        this.feedStore.Update(feed);
    }

    private void UpdateTagInput(NewsFeed feed, string value)
    {
        newTagInputs[feed.FeedUrl] = value;
    }

    private void AddTag(NewsFeed feed)
    {
        if (!newTagInputs.ContainsKey(feed.FeedUrl) || string.IsNullOrWhiteSpace(newTagInputs[feed.FeedUrl]))
        {
            this.logger.LogWarning("Tag input is empty for feed {FeedUrl}", feed.FeedUrl);
            return;
        }
        
        var tag = newTagInputs[feed.FeedUrl];
        this.feedStore.AddTag(feed, tag);
        newTagInputs[feed.FeedUrl] = string.Empty;
        this.OnInitialized();
    }

}