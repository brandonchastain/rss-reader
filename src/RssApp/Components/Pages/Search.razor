@page "/search"
@inherits Base
@inject IFeedClient feedClient
@inject ILogger<Search> logger
@rendermode InteractiveServer
@attribute [StreamRendering]

<PageTitle>Search</PageTitle>

<h3>Search Posts</h3>

<input @bind="searchTerm" @bind:event="oninput" placeholder="Search..." class="form-control mb-3" @onkeydown="(e) => OnKeyDown(e)" />
<button class="btn btn-primary mb-3" @onclick="() => SearchPosts()">Search</button>

    @if (!initialized)
    {
        <div class="alert alert-info">Enter a search term to find posts.</div>
    }
    else if (!SearchResults.Any())
    {
        <div class="alert alert-warning">No results found. Try a different search.</div>
    }
    else
    {
        <CascadingValue Value="@feedClient" Name="FeedClient">
        <CascadingValue Value="@CurrentUser" Name="CurrentUser">
        <CascadingValue Value="@Page" Name="Page">
        <CascadingValue Value="@SearchResults" Name="Posts">
        <CascadingValue Value="@false" Name="ShowToolbar">
            <PostTable OnPageChanged="UpdatePage" OnRefreshTriggered="RefreshPosts"/>
        </CascadingValue>
        </CascadingValue>
        </CascadingValue>
        </CascadingValue>
        </CascadingValue>
    }

@code {
    private string searchTerm = string.Empty;
    private List<NewsFeedItem> SearchResults { get; set; } = new List<NewsFeedItem>();
    public int Page { get; set; } = 0;
    private int loadedPage = -1;
    private bool initialized = false;

    [CascadingParameter]
    public RssUser CurrentUser { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (CurrentUser == null)
        {
            var username = await this.GetUsernameAsync();
            if (username == null)
            {
                return;
            }
            this.CurrentUser = await this.feedClient.RegisterUserAsync(username);
        }
    }

    private async Task SearchPosts()
    {
        Page = 0;
        SearchResults = (await feedClient.SearchItemsAsync(searchTerm, Page)).ToList();
        loadedPage = Page;
        initialized = true;
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchPosts();
        }
    }

    private async Task UpdatePage()
    {
        if (!initialized)
        {
            return;
        }

        Page += 1;

        await this.RefreshPosts((this.feedClient.IsFilterUnread, this.feedClient.IsFilterSaved, this.feedClient.FilterTag));
    }

    private async Task RefreshPosts((bool isFilterUnread, bool isFilterSaved, string filterTag) filters)
    {
        if (filters.isFilterUnread != this.feedClient.IsFilterUnread
            || filters.isFilterSaved != this.feedClient.IsFilterSaved
            || filters.filterTag != this.feedClient.FilterTag)
        {
            SearchResults = new List<NewsFeedItem>();
            Page = 0;
            this.loadedPage = -1;
            this.feedClient.IsFilterUnread = filters.isFilterUnread;
            this.feedClient.IsFilterSaved = filters.isFilterSaved;
            this.feedClient.FilterTag = filters.filterTag;
        }

        if (Page <= loadedPage)
        {
            this.logger.LogWarning("RefreshPosts extraneous call");
            return;
        }

        var newPageRes = await this.feedClient.SearchItemsAsync(searchTerm, Page);
        SearchResults.AddRange(newPageRes);
        SearchResults = SearchResults.Distinct().ToList();
        this.loadedPage = Page;
        this.StateHasChanged();
    }
}