@page "/search"
@inherits PostPageBase
@inject ILogger<Search> logger
@rendermode InteractiveServer
@attribute [StreamRendering]
@attribute [Authorize]

<PageTitle>Search</PageTitle>

<h3>Search Posts</h3>

<input @bind="searchTerm" @bind:event="oninput" placeholder="Search..." class="form-control mb-3" @onkeydown="(e) => OnKeyDown(e)" />
<button class="btn btn-primary mb-3" @onclick="() => SearchPosts()">Search</button>

@if (!initialized)
{
    <div class="alert alert-info">Enter a search term to find posts.</div>
}
else if (!Items.Any())
{
    <div class="alert alert-warning">No results found. Try a different search.</div>
}
else
{
    <CascadingValue Value="@Page" Name="Page">
    <CascadingValue Value="@Items" Name="Posts">
        <PostTable OnPageChanged="UpdatePage" FeedClient="@this.feedClient" OnRefreshTriggered="RefreshItems"/>
    </CascadingValue>
    </CascadingValue>
}

@code {
    private string searchTerm = string.Empty;

    protected override async Task<List<NewsFeedItem>> GetPostsAsync()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            return new List<NewsFeedItem>();
        }

        var res = await feedClient.SearchItemsAsync(searchTerm, Page);
        return res.ToList();
    }

    private async Task SearchPosts()
    {
        Page = 0;
        Items = await this.GetPostsAsync();
        loadedPage = Page;
        initialized = true;
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchPosts();
        }
    }
}