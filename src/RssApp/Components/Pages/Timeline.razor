@page "/timeline"
@page "/"
@attribute [StreamRendering]
@inject IFeedRepository feedStore
@inject IFeedClient feedClient
@inject ILogger<Timeline> logger
@inject IJSRuntime jsRuntime
@rendermode InteractiveServer

<PageTitle>Timeline</PageTitle>

<h1>Timeline</h1>

<CascadingValue Value="@feedClient" Name="FeedClient">
<CascadingValue Value="@CurrentUser" Name="CurrentUser">
    <CascadingValue Value="@Page" Name="Page">
        <CascadingValue Value="@Posts" Name="Posts">
            <PostTable OnPageChanged="UpdatePage" OnRefreshTriggered="RefreshPosts" />
        </CascadingValue>
    </CascadingValue>
</CascadingValue>
</CascadingValue>

@code {
    public RssUser CurrentUser { get; set; }
    public int Page { get; set; } = 0;
    public List<NewsFeedItem> Posts { get; set; } = new List<NewsFeedItem>();

    protected override void OnInitialized()
    {
        Page = 0;
    }

    private async Task UpdatePage(int newValue)
    {
        Page = newValue;
        await this.RefreshPosts((this.feedClient.IsFilterUnread, this.feedClient.FilterTag));
        StateHasChanged();
    }

    private async Task RefreshPosts((bool isFilterUnread, string filterTag) filters)
    {
        this.feedClient.IsFilterUnread = filters.isFilterUnread;
        this.feedClient.FilterTag = filters.filterTag;
        var newPageRes = await this.feedClient.GetTimelineAsync(Page);
        Posts.AddRange(newPageRes);
        this.StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var username = await this.GetUsernameAsync();
            this.CurrentUser = await this.feedClient.RegisterUserAsync(username);
            Posts = (await this.feedClient.GetTimelineAsync(Page)).ToList();
            this.StateHasChanged();
        }
    }

    private async Task<string> GetUsernameAsync()
    {
        return await jsRuntime.InvokeAsync<string>("getUsername");
    }

}