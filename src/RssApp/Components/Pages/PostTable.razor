@attribute [StreamRendering]
@using System.Xml
@using System.Xml.Linq
@using System.Xml.Serialization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Web.Virtualization
@inject IFeedClient feedClient
@inject ILogger<Posts> logger
@inject NavigationManager NavigationManager
@inject IJSRuntime jsRuntime
@implements IDisposable
@inject AuthenticationStateProvider AuthenticationStateProvider

@rendermode InteractiveServer // needed for onclick
Username: @username
@if (posts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div style="float: inline-start;">
    </div>
    <div style="float:inline-end;">
        <button class="btn-link" @onclick="() => MarkAllAsRead()">Mark all as read</button>
        <button class="btn-link" @onclick="() => ToggleUnreadFilterAsync()">@(this.feedClient.IsFilterUnread ? "[Show all]" : "[Show unread only]")</button>
    </div>
    <table id="post-table" class="table">
        <thead>
            <tr>
                <th>Post</th><th>&nbsp;</th><th>Actions</th><th>Date</th>
            </tr>
        </thead>
        <tbody>
            <Virtualize Items="posts" Context="post" TItem="NewsFeedItem">
                <tr class="@(post.IsRead ? "post-read" : "post-unread")" @onclick="() => PreviewPost(post)">
                    <td>
                        @{
                            var thumbnailUrl = post.GetThumbnailUrl();
                            if (!String.IsNullOrWhiteSpace(thumbnailUrl))
                            {
                                <img src="@post.GetThumbnailUrl()" alt="Thumbnail" class="thumbnail" />
                            }
                        }
                    </td>
                    <td class="col-8">
                        <a tooltip="@post.ParsedDate?.ToString("f")" href="@this.GetEffectiveHref(post)" target="_blank" @onclick="() => MarkAsRead(post, true)">@post.Title</a>
                        @this.GetRootDomain(post.Href)
                        &nbsp;
                        &nbsp;
                        @if (!String.IsNullOrWhiteSpace(post.CommentsHref))
                        {
                            <a href="@post.CommentsHref">[comments]</a>
                        }

                        <span hidden=@(!post.IsBeingPreviewed)>
                            <CascadingValue Value="@post">
                                <Content/>
                            </CascadingValue>
                        </span>
                    </td>
                    <td>
                        <a href="/posts?feedUrl=@post.FeedUrl" onclick="event.stopPropagation()">[feed]</a>
                        <button class="link" @onclick="() => Hide(post.Href)">[hide]</button>
                    </td>
                    <td>@post.ParsedDate?.ToString("f")</td>
                </tr>
            </Virtualize>
        </tbody>
    </table>

    <button class="btn-link" @onclick="() => Prev()">Prev</button>
    <button class="btn-link" @onclick="() => Next()">Next</button>
}

<script>
    async function getUsername() {
        const response = await fetch('/.auth/me');  
        console.log("sending request...");
        // convert to JSON  
        const json = await response.json();  
        // ensure clientPrincipal and userDetails exist  
        if(json.length > 0 && json[0].user_id) {  
            // return userDetails (the username)  
            console.log(json[0].user_id);
            return json[0].user_id;  
        } else {  
            // return null if anonymous
            return null;  
        }
    }
</script>

@code {
    private int page = 0;
    private ICollection<NewsFeedItem> posts = new List<NewsFeedItem>();
    private Timer timer;
    private string username;
    
    [CascadingParameter]
    public Func<IFeedClient, int, Task<IEnumerable<NewsFeedItem>>> GetFeed { get; set; }

    public void Dispose()
    {
        this.timer?.Dispose();
        this.timer = null;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this.logger.LogInformation("[DEBUG] firstrender");
            this.username = await this.GetUsernameAsync();
            this.logger.LogInformation("[DEBUG] username: {username}", this.username);
            await this.feedClient.RegisterUserAsync(this.username);
        }

        this.posts = (await this.GetFeed(this.feedClient, this.page))?.ToList() ?? new List<NewsFeedItem>();
        this.StateHasChanged();
    }

    private async Task<string> GetUsernameAsync()
    {
        // invoke a javascript function to get the username
        var username = await jsRuntime.InvokeAsync<string>("getUsername");
        return username;
    }

    private async Task Hide(string postId)
    {
        this.feedClient.HidePost(postId);
        await this.OnInitializedAsync();
    }

    private async Task MarkAllAsRead()
    {
        foreach (var post in this.posts)
        {
            post.IsRead = true;
        }

        this.StateHasChanged();

        foreach (var post in this.posts)
        {
            this.feedClient.MarkAsRead(post, true);
        }
        await this.OnInitializedAsync();
    }

    private void MarkAsRead(NewsFeedItem item, bool? isRead = null)
    {
        bool val = isRead ?? !item.IsRead;
        item.IsRead = val;
        this.feedClient.MarkAsRead(item, val);
        this.StateHasChanged();
    }

    private async Task ToggleUnreadFilterAsync()
    {
        this.feedClient.IsFilterUnread = !this.feedClient.IsFilterUnread;
        await this.OnInitializedAsync();
    }

    private void PreviewPost(NewsFeedItem post)
    {
        post.IsBeingPreviewed = !post.IsBeingPreviewed;
        this.StateHasChanged();

        MarkAsRead(post, true);
    }

    private async Task Prev()
    {
        if (this.page == 0)
        {
            return;
        }
        
        this.page -= 1;
        await this.OnInitializedAsync();
    }

    private async Task Next()
    {
        this.page += 1;
        await this.OnInitializedAsync();
    }

    private string GetRootDomain(string url)
    {
        return new Uri(url).Authority;
    }

    private string GetEffectiveHref(NewsFeedItem post)
    {
        if (post.IsPaywalled)
        {
            return "https://archive.is/" + post.Href;
        }

        return post.Href;
    }
}