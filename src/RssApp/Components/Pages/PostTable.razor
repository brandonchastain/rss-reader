@attribute [StreamRendering]
@using System.Xml
@using System.Xml.Linq
@using System.Xml.Serialization
@using Microsoft.AspNetCore.Components.Web.Virtualization
@inject IFeedClient feedClient
@inject ILogger<Posts> logger
@inject NavigationManager NavigationManager
@implements IDisposable

@rendermode InteractiveServer // needed for onclick

@if (posts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button class="btn-link" @onclick="() => MarkAllAsRead()">Mark all as read</button>
    <table class="table">
        <thead>
            <tr>
                <th>&nbsp;</th><th>&nbsp;</th><th>Post</th><th>Comments</th><th>Date</th>
            </tr>
        </thead>
        <tbody>
            <Virtualize Items="posts" Context="post" TItem="NewsFeedItem">
                <tr style="background-color: @(post.IsRead ? "white" : "#fff9c4")">
                    <td>
                        <button class="btn-link" @onclick="() => MarkAsRead(post)">Read</button>
                    </td>
                    <td>
                        <button class="btn-link" @onclick="() => Hide(post.Href)">Hide</button>
                    </td>
                    <td class="col-8">
                        <a href="@this.GetEffectiveHref(post)" target="_blank" @onclick="() => MarkAsRead(post, true)">@post.Title</a> -
                        @this.GetRootDomain(post.Href) -
                        <a href="/posts?feedUrl=@post.FeedUrl">
                            Feed
                        </a>
                    </td>
                    <td>

                        @if (!String.IsNullOrWhiteSpace(post.CommentsHref))
                        {
                            <a href="@post.CommentsHref">Comments</a>
                        }
                        else
                        {

                        }
                    </td>
                    <td>@post.ParsedDate?.ToString("f")</td>

                    <div id="@post.Id" style="display:none;">@post.Content</div>
                </tr>
            </Virtualize>
        </tbody>
    </table>

    <button class="btn-link" @onclick="() => Prev()">Prev</button>
    <button class="btn-link" @onclick="() => Next()">Next</button>
}

@code {
    private int page = 0;
    private ICollection<NewsFeedItem> posts;
    private Timer timer;
    
    [CascadingParameter]
    public Func<IFeedClient, int, IEnumerable<NewsFeedItem>> GetFeed { get; set; }

    public void Dispose()
    {
        this.timer?.Dispose();
        this.timer = null;
    }

    protected override Task OnInitializedAsync()
    {
        this.posts = this.GetFeed(this.feedClient, this.page)?.ToList() ?? new List<NewsFeedItem>();
        //this.timer ??= new Timer(this.HandleTimerEvent, null, TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(5));
        return Task.CompletedTask;
    }

    private async void HandleTimerEvent(object state)
    {
        this.posts = this.GetFeed(this.feedClient, this.page)?.ToList() ?? new List<NewsFeedItem>();
        this.logger.LogInformation("Timer event fired");
        await this.InvokeAsync(async () => await this.OnInitializedAsync());
    }

    private async Task Hide(string postId)
    {
        this.feedClient.HidePost(postId);
        await this.OnInitializedAsync();
    }

    private async Task MarkAllAsRead()
    {
        foreach (var post in this.posts)
        {
            await this.feedClient.MarkAsReadAsync(post, true);
        }
        await this.OnInitializedAsync();
    }

    private async Task MarkAsRead(NewsFeedItem item, bool? isRead = null)
    {
        await this.feedClient.MarkAsReadAsync(item, isRead ?? !item.IsRead);
        await this.OnInitializedAsync();
    }

    private async Task Prev()
    {
        if (this.page == 0)
        {
            return;
        }
        
        this.page -= 1;
        await this.OnInitializedAsync();
    }

    private async Task Next()
    {
        this.page += 1;
        await this.OnInitializedAsync();
    }

    private string GetRootDomain(string url)
    {
        return new Uri(url).Authority;
    }

    private string GetEffectiveHref(NewsFeedItem post)
    {
        if (post.IsPaywalled)
        {
            return "https://archive.is/" + post.Href;
        }

        return post.Href;
    }
}