@attribute [StreamRendering]
@using System.Xml
@using System.Xml.Linq
@using System.Xml.Serialization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Sve.Blazor.InfiniteScroll.Components
@inject IFeedClient feedClient
@inject ILogger<Posts> logger
@inject NavigationManager NavigationManager
@inject IJSRuntime jsRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider

@rendermode InteractiveServer
@if (Posts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="toolbar">
        @* <button class="btn-link" @onclick="() => MarkAllAsRead()">Mark all as @(allAreMarkedAsRead ? "unread" : "read")</button> *@
        <button class="btn-link" @onclick="() => ToggleUnreadFilterAsync()">@(this.IsFilterUnread ? "[Show all]" : "[Show unread only]")</button>
    </div>
    <div id="post-table" class="table">
        <InfiniteScroll ObserverTargetId="observerTarget" ObservableTargetReached="(e) => Next()">
            @foreach (var post in Posts)
            {
                <div class="row @(post.IsRead ? "post-read" : "post-unread")" @onclick="() => PreviewPost(post)" hidden=@(!post.IsBeingPreviewed && this.IsFilterUnread && post.IsRead)>
                    <div class="col thumbnail">
                        @{
                            var thumbnailUrl = post.GetThumbnailUrl();
                            if (!String.IsNullOrWhiteSpace(thumbnailUrl))
                            {
                                <img src="@post.GetThumbnailUrl()" alt="Thumbnail" class="thumbnail" />
                            }
                        }
                    </div>
                    <div class="col">
                        <p class="post-title">
                            <a tooltip="@post.ParsedDate?.ToString("f")" href="@this.GetEffectiveHref(post)" target="_blank" @onclick:stopPropagation="true" @onclick="() => MarkAsRead(post, true)">@post.Title</a>
                            @if (!String.IsNullOrWhiteSpace(post.CommentsHref))
                            {
                                <a href="@post.CommentsHref">[comments]</a>
                            }
                            <button class="link" @onclick:stopPropagation="true" @onclick:preventDefault="true" @onclick="() => MarkAsRead(post)">[mark @(!post.IsRead ? "read" : "unread")]</button>&nbsp;<button class="link" @onclick:stopPropagation="true" @onclick:preventDefault="true" @onclick="() => Hide(post.Href)">[hide]</button>
                            @this.GetRootDomain(post.Href)<br/>
                        </p>
                    </div>
                </div>
                <div class="row" hidden=@(!post.IsBeingPreviewed)>
                    @if (post != null)
                    {
                        <div class="postContent">
                            <p>
                                Published on @post.ParsedDate?.ToString("f")
                            </p>
                            @((MarkupString)HtmlSanitizer.Sanitize(post.Content))
                            <p>
                                <a href="/posts?feedUrl=@post.FeedUrl" onclick="event.stopPropagation()">View all posts from ths feed</a><br/>
                            </p>
                        </div>
                    }
                    else
                    {
                        <p>Loading...</p>
                    }
                </div>
            }
            <div id="observerTarget"></div>
        </InfiniteScroll>
    </div>
    <div class="row" style="margin-top: 500px;">
        Oh no! You have reached the end of the feed. 
    </div>
}
<script src="_content/Sve.Blazor.InfiniteScroll/js/Observer.js"></script>

@code {
    [CascadingParameter(Name = "Page")]
    public int Page { get; set; } = 0;
    
    [CascadingParameter(Name = "Posts")]
    public ICollection<NewsFeedItem> Posts { get; set; } = new List<NewsFeedItem>();
    [Parameter]
    public EventCallback<int> OnPageChanged { get; set; }

    [Parameter]
    public EventCallback<bool> OnRefreshTriggered { get; set; }

    public bool IsFilterUnread { get; set; } = false;

    private bool allAreMarkedAsRead = false;

    private async Task Hide(string postId)
    {
        this.feedClient.HidePost(postId);
        await this.OnRefreshTriggered.InvokeAsync(this.IsFilterUnread);
    }

    private void MarkAllAsRead()
    {
        foreach (var post in this.Posts)
        {
            post.IsRead = !allAreMarkedAsRead;
        }

        allAreMarkedAsRead = !allAreMarkedAsRead;

        foreach (var post in this.Posts)
        {
            this.feedClient.MarkAsRead(post, post.IsRead);
        }

        this.StateHasChanged();
    }

    private void MarkAsRead(NewsFeedItem item, bool? isRead = null)
    {
        bool val = isRead ?? !item.IsRead;
        item.IsRead = val;
        this.feedClient.MarkAsRead(item, val);
        this.StateHasChanged();
    }

    private async Task ToggleUnreadFilterAsync()
    {
        this.IsFilterUnread = !this.IsFilterUnread;
        this.feedClient.IsFilterUnread = this.IsFilterUnread;
        await this.OnRefreshTriggered.InvokeAsync(this.feedClient.IsFilterUnread);
        this.StateHasChanged();
    }

    private void PreviewPost(NewsFeedItem post)
    {
        post.IsBeingPreviewed = !post.IsBeingPreviewed;
        this.StateHasChanged();

        MarkAsRead(post, true);
    }

    private async Task Prev()
    {
        if (this.Page == 0)
        {
            return;
        }
        
        this.Page -= 1;
        await this.OnPageChanged.InvokeAsync(this.Page);
        this.StateHasChanged();
    }

    private async Task Next()
    {
        this.Page += 1;
        await this.OnPageChanged.InvokeAsync(this.Page);
        this.StateHasChanged();
    }

    private string GetRootDomain(string url)
    {
        return new Uri(url).Authority;
    }

    private string GetEffectiveHref(NewsFeedItem post)
    {
        if (post.IsPaywalled)
        {
            return "https://archive.is/" + post.Href;
        }

        return post.Href;
    }
}