@rendermode InteractiveServer
@attribute [StreamRendering]
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Sve.Blazor.InfiniteScroll.Components
@inject ILogger<Posts> logger
@inject IJSRuntime jsRuntime

@if (Posts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="toolbar">
        <button class="btn-link" @onclick="() => ToggleUnreadFilterAsync()">@(this.IsFilterUnread ? "[all]" : "[unread]")</button>
        @foreach (var tag in this.userTags)
        {
            <button class="btn-link" style="@(this.filterTag == tag ? "color: pink" : "")" @onclick="() => FilterForTag(tag)">[@tag]</button>
        }
    </div>
    <div id="post-table" class="table">
        <InfiniteScroll ObserverTargetId="observerTarget" ObservableTargetReached="(e) => Next()">
            @foreach (var post in Posts)
            {
                <div class="row @(post.IsRead ? "post-read" : "post-unread")" @onclick="() => PreviewPost(post)" hidden=@(ShouldPostBeHidden(post))>
                    <div class="col thumbnail">
                        @{
                            var thumbnailUrl = post.GetThumbnailUrl();
                            if (!String.IsNullOrWhiteSpace(thumbnailUrl))
                            {
                                <img src="@post.GetThumbnailUrl()" alt="Thumbnail" class="thumbnail" />
                            }
                        }
                    </div>
                    <div class="col">
                        <p class="post-title">
                            <a tooltip="@post.ParsedDate?.ToString("f")" href="@this.GetEffectiveHref(post)" target="_blank" @onclick:stopPropagation="true" @onclick="() => MarkAsRead(post, true)">@post.Title</a><br/>
                            @if (!String.IsNullOrWhiteSpace(post.CommentsHref))
                            {
                                <a href="@post.CommentsHref">[comments]</a>
                            }
                            <button class="link" @onclick:stopPropagation="true" @onclick:preventDefault="true" @onclick="() => MarkAsRead(post)">[mark @(!post.IsRead ? "read" : "unread")]</button>
                            @this.GetRootDomain(post.Href)<br/>
                            @(post.FeedTags.Any() ? $"[{string.Join(",", post.FeedTags)}]" : "")
                        </p>
                    </div>
                </div>
                <div class="postContent" hidden=@(!post.IsBeingPreviewed)>
                    @if (post != null)
                    {
                        <div class="">
                            <p>
                                Published on @post.ParsedDate?.ToString("f")
                            </p>
                            <p>
                                @((MarkupString)HtmlSanitizer.Sanitize(post.Content))
                            </p>
                            <p>
                                <a href="/posts?feedUrl=@System.Net.WebUtility.UrlEncode(post.FeedUrl)" onclick="event.stopPropagation()">View all posts from this feed</a><br/>
                            </p>
                        </div>
                    }
                    else
                    {
                        <p>Loading...</p>
                    }
                </div>
            }
            <div class="row" style="height: 100px">
                &nbsp;
            </div>
            <div class="row">
                <div id="observerTarget" class="col-3">
                    Oh no! You have reached the end of the feed. 
                </div>
            </div>
        </InfiniteScroll>
    </div>
}

<script type="text/javascript">
window.Observer = {
    observer: null,
    Initialize: function (component, observerTargetId) {
        this.observer = new IntersectionObserver(e => {
            // Check here
            if (e[0].isIntersecting) {
                component.invokeMethodAsync('OnIntersection');
            }
        },
        {
            root: null,
            rootMargin: '0px',
            threshold: [0]
        });

        let element = document.getElementById(observerTargetId);
        if (element == null) throw new Error("The observable target was not found");
        this.observer.observe(element);
    }
};
</script>
@* <script src="_content/Sve.Blazor.InfiniteScroll/js/Observer.js"></script> *@

@code {
    public IEnumerable<string> userTags = new List<string>();

    [CascadingParameter(Name = "FeedClient")]
    public IFeedClient FeedClient { get; set; }

    [CascadingParameter(Name = "CurrentUser")]
    public RssUser User { get; set; }

    [CascadingParameter(Name = "Page")]
    public int Page { get; set; } = 0;
    
    [CascadingParameter(Name = "Posts")]
    public ICollection<NewsFeedItem> Posts { get; set; } = new List<NewsFeedItem>();
    [Parameter]
    public EventCallback<int> OnPageChanged { get; set; }

    [Parameter]
    public EventCallback<(bool, string)> OnRefreshTriggered { get; set; }

    public bool IsFilterUnread { get; set; } = false;
    private string filterTag = null;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (User == null)
        {
            var username = await this.GetUsernameAsync();
            this.User = await this.FeedClient.RegisterUserAsync(username);
            this.userTags = this.FeedClient.GetUserTags(User);
            this.StateHasChanged();
        }
    }

    private async Task<string> GetUsernameAsync()
    {
        return await jsRuntime.InvokeAsync<string>("getUsername");
    }

    private bool ShouldPostBeHidden(NewsFeedItem post)
    {
        bool isFilteredByTag = this.filterTag != null && !post.FeedTags.Contains(this.filterTag);
        bool isFilteredByUnread = !post.IsBeingPreviewed && this.IsFilterUnread && post.IsRead;
        return isFilteredByTag || isFilteredByUnread;
    }

    private void MarkAsRead(NewsFeedItem item, bool? isRead = null)
    {
        bool val = isRead ?? !item.IsRead;
        item.IsRead = val;
        this.FeedClient.MarkAsRead(item, val);
        this.StateHasChanged();
    }

    private async Task ToggleUnreadFilterAsync()
    {
        this.IsFilterUnread = !this.IsFilterUnread;
        await this.OnRefreshTriggered.InvokeAsync((this.IsFilterUnread, this.filterTag));
    }

    private async Task FilterForTag(string tag)
    {
        if (this.filterTag == tag)
        {
            this.filterTag = null;
            await this.OnRefreshTriggered.InvokeAsync((this.IsFilterUnread, this.filterTag));
            return;
        }
        
        this.filterTag = tag;
        await this.OnRefreshTriggered.InvokeAsync((this.IsFilterUnread, this.filterTag));
    }

    private void PreviewPost(NewsFeedItem post)
    {
        post.IsBeingPreviewed = !post.IsBeingPreviewed;
        this.StateHasChanged();

        MarkAsRead(post, true);
    }

    private async Task Next()
    {
        await this.OnPageChanged.InvokeAsync(this.Page);
        this.StateHasChanged();
    }

    private string GetRootDomain(string url)
    {
        return new Uri(url).Authority;
    }

    private string GetEffectiveHref(NewsFeedItem post)
    {
        if (post.IsPaywalled)
        {
            return "https://archive.is/" + post.Href;
        }

        return post.Href;
    }
}